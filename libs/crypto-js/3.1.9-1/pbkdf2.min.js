!function(e,r,t){"object"==typeof exports?module.exports=exports=r(require("./core"),require("./sha1"),require("./hmac")):"function"==typeof define&&define.amd?define(["./core","./sha1","./hmac"],r):r(e.CryptoJS)}(this,function(e){return function(){var r=e,t=r.lib,i=t.Base,n=t.WordArray,o=r.algo,a=o.SHA1,c=o.HMAC,s=o.PBKDF2=i.extend({cfg:i.extend({keySize:4,hasher:a,iterations:1}),init:function(e){this.cfg=this.cfg.extend(e)},compute:function(e,r){for(var t=this.cfg,i=c.create(t.hasher,e),o=n.create(),a=n.create([1]),s=o.words,f=a.words,u=t.keySize,d=t.iterations;s.length<u;){var h=i.update(r).finalize(a);i.reset();for(var p=h.words,g=p.length,l=h,y=1;y<d;y++){l=i.finalize(l),i.reset();for(var m=l.words,x=0;x<g;x++)p[x]^=m[x]}o.concat(h),f[0]++}return o.sigBytes=4*u,o}});r.PBKDF2=function(e,r,t){return s.create(t).compute(e,r)}}(),e.PBKDF2});
//# sourceMappingURL=pbkdf2.min.js.map